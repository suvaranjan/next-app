{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"contentlayer2/source-files\";\r\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\r\nimport rehypeSlug from \"rehype-slug\";\r\nimport remarkGfm from \"remark-gfm\";\r\nimport path from \"path\";\r\nimport { writeFileSync } from \"fs\";\r\nimport { Document } from \"node_modules/@contentlayer2/core/dist/data-types\";\r\n\r\nexport const Post = defineDocumentType(() => ({\r\n  name: \"Post\",\r\n  filePathPattern: `**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: { type: \"string\", required: true },\r\n    keyword: { type: \"string\", required: true },\r\n    date: { type: \"date\", required: true },\r\n  },\r\n  computedFields: {\r\n    slug: {\r\n      type: \"string\",\r\n      resolve: (post) => `/posts/${post._raw.flattenedPath}`,\r\n    },\r\n  },\r\n}));\r\n\r\n// Function to create the search index file\r\nfunction createSearchIndex(allPosts: Document[]) {\r\n  const searchData = allPosts.map((post) => ({\r\n    title: post.title,\r\n    keyword: post.keyword,\r\n    slug: post.slug,\r\n  }));\r\n  // Write the search index data to a search.json file\r\n  const searchIndexPath = path.join(\r\n    process.cwd(),\r\n    \"src/data\",\r\n    \"post-search.json\"\r\n  );\r\n  writeFileSync(searchIndexPath, JSON.stringify(searchData, null, 2));\r\n}\r\n\r\nexport default makeSource({\r\n  contentDirPath: \"src/data/summary\",\r\n  documentTypes: [Post],\r\n  mdx: {\r\n    remarkPlugins: [remarkGfm],\r\n    rehypePlugins: [\r\n      rehypeSlug,\r\n      [\r\n        rehypeAutolinkHeadings,\r\n        {\r\n          properties: { className: [\"anchor\"] },\r\n        },\r\n      ],\r\n    ],\r\n  },\r\n  onSuccess: async (importData) => {\r\n    const data = await importData();\r\n    createSearchIndex(data.allDocuments); // Generate search index after content is processed\r\n  },\r\n});\r\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,4BAA4B;AACnC,OAAO,gBAAgB;AACvB,OAAO,eAAe;AACtB,OAAO,UAAU;AACjB,SAAS,qBAAqB;AAGvB,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,SAAS,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC1C,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,EACvC;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,UAAU,KAAK,KAAK,aAAa;AAAA,IACtD;AAAA,EACF;AACF,EAAE;AAGF,SAAS,kBAAkB,UAAsB;AAC/C,QAAM,aAAa,SAAS,IAAI,CAAC,UAAU;AAAA,IACzC,OAAO,KAAK;AAAA,IACZ,SAAS,KAAK;AAAA,IACd,MAAM,KAAK;AAAA,EACb,EAAE;AAEF,QAAM,kBAAkB,KAAK;AAAA,IAC3B,QAAQ,IAAI;AAAA,IACZ;AAAA,IACA;AAAA,EACF;AACA,gBAAc,iBAAiB,KAAK,UAAU,YAAY,MAAM,CAAC,CAAC;AACpE;AAEA,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe;AAAA,MACb;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,YAAY,EAAE,WAAW,CAAC,QAAQ,EAAE;AAAA,QACtC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,WAAW,OAAO,eAAe;AAC/B,UAAM,OAAO,MAAM,WAAW;AAC9B,sBAAkB,KAAK,YAAY;AAAA,EACrC;AACF,CAAC;",
  "names": []
}
